{"version":3,"sources":["screens/layout/worker.js","screens/layout/colors.js","screens/layout/components/PartsSummary.js","screens/layout/components/Part.js","screens/layout/components/MaterialLayout.js","screens/layout/components/Material.js","screens/layout/index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","excludedColors","colors","Object","entries","muiColors","filter","key","includes","map","materialColor","getPartColor","partId","color","fill","text","stroke","PartsSummary","parts","Table","size","TableHead","TableRow","TableCell","TableBody","part","id","data-testid","htmlColor","dimensions","width","height","quantity","labelFont","labelFontSize","renderedTextSize","string","svgNS","el","document","createElementNS","sizingContainer","querySelector","append","setAttributeNS","textNode","createTextNode","appendChild","bBox","getBBox","remove","Part","item","x","y","transformations","alignment","transform","textSize","scale","factor","xTranslated","yTranslated","push","percentDiff","textValue","containerValue","widthPercentOff","Math","max","rotatedPercentOff","length","join","getTextAlignment","dominantBaseline","textAnchor","fontFamily","fontSize","PropTypes","shape","number","isRequired","MaterialLayout","bins","bin","index","Grid","xs","viewBox","instanceNumber","TopPaddedHeader","styled","Typography","Material","material","Card","CardHeader","title","subheader","CardContent","variant","KerfEntry","DimensionField","KerfForm","onChange","value","initialValues","onSubmit","values","setSubmitting","isSubmitting","showHelperText","margin","label","disabled","type","Hidden","xsDown","Layout","headerRef","useStore","state","setKerf","setRotation","setSelectionStrategy","setSplitStrategy","setSortStrategy","useState","layouts","setLayouts","useAnalytics","pageview","event","enqueueSnackbar","useSnackbar","theme","useTheme","matches","useMediaQuery","breakpoints","up","useEffect","materials","navigate","convertedKerfSize","parseDimension","kerfSize","convertAndScaleDimension","dimension","ceil","selectionStrategy","undefined","splitStrategy","sortStrategy","Promise","all","a","async","instance","worker","inputs","convertedParts","reduce","acc","convertedPart","i","pack","binHeight","binWidth","items","allowRotation","then","transformedMaterials","category","action","container","spacing","Portal","current","Fade","in","to","Button","onClick","window","print","smDown","newKerf","FormControlLabel","control","Switch","checked","e","Boolean","target","labelPlacement","Select","newStrategy","MenuItem","lg","message"],"mappings":"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","file":"static/js/6.b51a0929.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"pack\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"649eb75d772d9c025db7.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import * as muiColors from \"@material-ui/core/colors\";\r\n\r\nconst excludedColors = [\"blueGrey\", \"red\", \"brown\", \"grey\", \"common\"];\r\nconst colors = Object.entries(muiColors)\r\n  .filter(([key]) => !excludedColors.includes(key))\r\n  .map(([, values]) => values);\r\n\r\nexport const materialColor = muiColors.blueGrey[200];\r\n\r\nexport default function getPartColor(partId) {\r\n  const color = colors[partId - 1];\r\n  return {\r\n    fill: color[200],\r\n    text: color[900],\r\n    stroke: \"#444444\"\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody\r\n} from \"@material-ui/core\";\r\nimport getPartColor from \"../colors\";\r\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\r\nimport { VerticallyCenteredContainer } from \"shared/components/pattern\";\r\n\r\nexport default function PartsSummary({ parts }) {\r\n  return (\r\n    <Table size=\"small\">\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Part</TableCell>\r\n          <TableCell>Dimensions</TableCell>\r\n          <TableCell>Quantity</TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {parts.map(part => (\r\n          <TableRow key={part.id} data-testid=\"part-row\">\r\n            <TableCell>\r\n              <VerticallyCenteredContainer>\r\n                <StopRoundedIcon htmlColor={getPartColor(part.id).fill} />\r\n                <span>{part.name}</span>\r\n              </VerticallyCenteredContainer>\r\n            </TableCell>\r\n            <TableCell>\r\n              {part.dimensions.width} x {part.dimensions.height}\r\n            </TableCell>\r\n            <TableCell>{part.quantity}</TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nPartsSummary.propTypes = {\r\n  parts: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired\r\n};\r\n","import React from \"react\";\r\nimport getPartColor from \"../colors\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst labelFont = \"Arial\";\r\nconst labelFontSize = 1000;\r\n// padding applied between edges of part label and box\r\nconst labelPadding = 4;\r\n\r\nconst renderedTextSize = string => {\r\n  var svgNS = \"http://www.w3.org/2000/svg\";\r\n  const el = document.createElementNS(svgNS, \"text\");\r\n  const sizingContainer = document.createElementNS(svgNS, \"svg\");\r\n  document.querySelector(\"body\").append(sizingContainer);\r\n  el.setAttributeNS(null, \"font-family\", labelFont);\r\n  el.setAttributeNS(null, \"font-size\", labelFontSize);\r\n  const textNode = document.createTextNode(string);\r\n  el.appendChild(textNode);\r\n  sizingContainer.appendChild(el);\r\n  var bBox = el.getBBox();\r\n  el.remove();\r\n  sizingContainer.remove();\r\n  return {\r\n    width: bBox.width + labelPadding,\r\n    height: bBox.height + labelPadding\r\n  };\r\n};\r\n\r\nexport default function Part({ part }) {\r\n  const getTextAlignment = part => {\r\n    const transformations = [];\r\n    const alignment = {\r\n      x: part.x + part.width / 2,\r\n      y: part.y + part.height / 2,\r\n      transform: null\r\n    };\r\n    const textSize = renderedTextSize(part.item.name);\r\n    const rotate = () => {\r\n      transformations.push(`rotate(-90, ${alignment.x}, ${alignment.y})`);\r\n    };\r\n    const scale = factor => {\r\n      let xTranslated = (1 - factor) * alignment.x;\r\n      let yTranslated = (1 - factor) * alignment.y;\r\n      transformations.push(`translate(${xTranslated}, ${yTranslated})`);\r\n      transformations.push(`scale(${factor})`);\r\n    };\r\n    const percentDiff = (textValue, containerValue) =>\r\n      (textValue - containerValue) / textValue;\r\n\r\n    const widthPercentOff = Math.max(\r\n      percentDiff(textSize.width, part.width),\r\n      percentDiff(textSize.height, part.height)\r\n    );\r\n    const rotatedPercentOff = Math.max(\r\n      percentDiff(textSize.width, part.height),\r\n      percentDiff(textSize.height, part.width)\r\n    );\r\n    // if rotating requires less scaling do that, otherwise just scale horizontally to fit\r\n    if (rotatedPercentOff < widthPercentOff) {\r\n      rotate();\r\n      scale(1 - rotatedPercentOff, \"y\");\r\n    } else {\r\n      scale(1 - widthPercentOff);\r\n    }\r\n    if (transformations.length) {\r\n      alignment.transform = transformations.join(\" \");\r\n    }\r\n    return alignment;\r\n  };\r\n  const color = getPartColor(part.item.id);\r\n  return (\r\n    <g>\r\n      <rect\r\n        fill={color.fill}\r\n        x={part.x}\r\n        y={part.y}\r\n        stroke={color.stroke}\r\n        width={part.width}\r\n        height={part.height}\r\n      />\r\n      <text\r\n        {...getTextAlignment(part)}\r\n        dominantBaseline=\"middle\"\r\n        textAnchor=\"middle\"\r\n        fontFamily={labelFont}\r\n        fontSize={labelFontSize}\r\n        fill={color.text}\r\n      >\r\n        {part.item.name}\r\n      </text>\r\n    </g>\r\n  );\r\n}\r\nexport const partPropType = PropTypes.shape({\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  item: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired\r\n  }).isRequired\r\n}).isRequired;\r\n\r\nPart.propTypes = {\r\n  part: partPropType\r\n};\r\n","import React from \"react\";\r\nimport Part, { partPropType } from \"./Part\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { materialColor } from \"../colors\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function MaterialLayout({ bins, width, height }) {\r\n  return (\r\n    <>\r\n      {bins.map((bin, index) => (\r\n        <Grid key={index} item xs={12}>\r\n          <svg width=\"100%\" viewBox={`0 0 ${width} ${height}`}>\r\n            <rect width={width} height={height} fill={materialColor}></rect>\r\n            {bin.map(part => (\r\n              <Part\r\n                key={`${part.item.id}-${part.item.instanceNumber}`}\r\n                part={part}\r\n              />\r\n            ))}\r\n          </svg>\r\n        </Grid>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nMaterialLayout.propTypes = {\r\n  bins: PropTypes.arrayOf(PropTypes.arrayOf(partPropType).isRequired)\r\n    .isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CardHeader, Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport PartsSummary from \"./PartsSummary\";\r\nimport MaterialLayout from \"./MaterialLayout\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TopPaddedHeader = styled(Typography)`\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport default function Material({ material }) {\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title={material.name}\r\n        subheader={`${material.bins.length} needed`}\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"h6\">Parts Summary</Typography>\r\n        <PartsSummary parts={material.parts} />\r\n        <TopPaddedHeader variant=\"h6\">Parts Layout</TopPaddedHeader>\r\n        <MaterialLayout\r\n          width={material.width}\r\n          height={material.height}\r\n          bins={material.bins}\r\n          name={material.name}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nMaterial.propTypes = {\r\n  material: PropTypes.shape({\r\n    parts: PropTypes.array.isRequired,\r\n    bins: PropTypes.array.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired\r\n  }).isRequired\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Portal,\r\n  Button,\r\n  Fade,\r\n  Hidden,\r\n  FormControlLabel,\r\n  Switch,\r\n  MenuItem,\r\n  Select,\r\n  useMediaQuery,\r\n  useTheme\r\n} from \"@material-ui/core\";\r\nimport { useStore, useAnalytics } from \"shared/context\";\r\nimport styled from \"styled-components\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { parseDimension } from \"parse-dimension\";\r\nimport Material from \"./components/Material\";\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport worker from \"workerize-loader!./worker\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Formik } from \"formik\";\r\nimport {\r\n  PrimaryButton,\r\n  SecondaryButton,\r\n  LoadingIndicator,\r\n  ActionBar,\r\n  DimensionField,\r\n  RouterLink,\r\n  VerticallyCenteredContainer\r\n} from \"shared/components\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nconst KerfEntry = styled(DimensionField)`\r\n  width: 50px;\r\n  margin-left: 20px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nfunction KerfForm({ onChange, value }) {\r\n  return (\r\n    <Formik\r\n      initialValues={{ value }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        onChange(values.value);\r\n        setSubmitting(false);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          <VerticallyCenteredContainer>\r\n            <KerfEntry\r\n              showHelperText={false}\r\n              margin=\"dense\"\r\n              name=\"value\"\r\n              variant=\"standard\"\r\n              label=\"Kerf\"\r\n            />\r\n\r\n            <SecondaryButton disabled={isSubmitting} type=\"submit\">\r\n              Update <Hidden xsDown>Kerf</Hidden>\r\n            </SecondaryButton>\r\n          </VerticallyCenteredContainer>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\nKerfForm.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string\r\n};\r\n\r\nfunction Layout({ headerRef }) {\r\n  const {\r\n    state,\r\n    setKerf,\r\n    setRotation,\r\n    setSelectionStrategy,\r\n    setSplitStrategy,\r\n    setSortStrategy\r\n  } = useStore();\r\n  const [layouts, setLayouts] = useState(null);\r\n  const { pageview, event } = useAnalytics();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const handleKerfChange = newKerf => {\r\n    setKerf(newKerf);\r\n    enqueueSnackbar(`Kerf updated`, { variant: \"success\" });\r\n    event({ category: \"Layout\", action: \"Kerf Changed\" });\r\n  };\r\n  const handleRotationChange = e => {\r\n    setRotation(Boolean(e.target.checked));\r\n  };\r\n\r\n  const handleSelectionStrategyChange = newStrategy => {\r\n    setSelectionStrategy(newStrategy ?? undefined);\r\n    enqueueSnackbar(`Selection strategy updated`, { variant: \"success\" });\r\n    event({ category: \"Layout\", action: \"Selection strategy Changed\" });\r\n  };\r\n\r\n  const handleSplitStrategyChange = newStrategy => {\r\n    setSplitStrategy(newStrategy);\r\n    enqueueSnackbar(`Split strategy updated`, { variant: \"success\" });\r\n    event({ category: \"Layout\", action: \"Split strategy Changed\" });\r\n  };\r\n\r\n  const handleSortStrategyChange = newStrategy => {\r\n    setSortStrategy(newStrategy);\r\n    enqueueSnackbar(`Sort strategy updated`, { variant: \"success\" });\r\n    event({ category: \"Layout\", action: \"Sort strategy Changed\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.materials.length === 0) {\r\n      navigate(\"/\");\r\n    } else {\r\n      pageview(\"/layout\");\r\n    }\r\n  }, [state.materials, pageview]);\r\n\r\n  useEffect(() => {\r\n    const MULTIPLIER = 1000;\r\n    const convertedKerfSize = parseDimension(state.kerfSize) * MULTIPLIER;\r\n    const convertAndScaleDimension = dimension =>\r\n      Math.ceil(parseDimension(dimension) * MULTIPLIER);\r\n\r\n    const selectionStrategy =\r\n      state.selectionStrategy === \"\" ? undefined : state.selectionStrategy;\r\n    const splitStrategy =\r\n      state.splitStrategy === \"\" ? undefined : state.splitStrategy;\r\n    const sortStrategy =\r\n      state.sortStrategy === \"\" ? undefined : state.sortStrategy;\r\n\r\n    Promise.all(\r\n      state.materials.map(async material => {\r\n        let instance = worker();\r\n        const inputs = {\r\n          ...material,\r\n          width: convertAndScaleDimension(material.dimensions.width),\r\n          height: convertAndScaleDimension(material.dimensions.height),\r\n          convertedParts: material.parts.reduce((acc, part) => {\r\n            const convertedPart = {\r\n              name: part.name,\r\n              id: part.id,\r\n              dimensions: part.dimensions,\r\n              height: convertAndScaleDimension(part.dimensions.height),\r\n              width: convertAndScaleDimension(part.dimensions.width)\r\n            };\r\n            for (let i = 0; i < part.quantity; i++) {\r\n              acc.push({ ...convertedPart, instanceNumber: i + 1 });\r\n            }\r\n            return acc;\r\n          }, [])\r\n        };\r\n        inputs.bins = await instance.pack(\r\n          {\r\n            binHeight: inputs.height,\r\n            binWidth: inputs.width,\r\n            items: inputs.convertedParts\r\n          },\r\n          {\r\n            kerfSize: convertedKerfSize,\r\n            allowRotation: state.allowRotation,\r\n            selectionStrategy: selectionStrategy,\r\n            splitStrategy: splitStrategy,\r\n            sortStrategy: sortStrategy\r\n          }\r\n        );\r\n        return inputs;\r\n      })\r\n    ).then(transformedMaterials => {\r\n      event({ category: \"Layout\", action: \"Layout Generated\" });\r\n      setLayouts(transformedMaterials);\r\n    });\r\n  }, [\r\n    state.materials,\r\n    event,\r\n    state.kerfSize,\r\n    state.allowRotation,\r\n    state.selectionStrategy,\r\n    state.splitStrategy,\r\n    state.sortStrategy\r\n  ]);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Portal container={headerRef.current}>\r\n        <Fade in>\r\n          <RouterLink to=\"/\">\r\n            <Button size=\"small\" variant=\"contained\">\r\n              <ArrowBackIcon />\r\n              Parts <Hidden xsDown>Configuration</Hidden>\r\n            </Button>\r\n          </RouterLink>\r\n        </Fade>\r\n      </Portal>\r\n\r\n      {layouts ? (\r\n        <>\r\n          <Grid item xs={12}>\r\n            <ActionBar>\r\n              <PrimaryButton onClick={() => window.print()}>\r\n                <PrintIcon />\r\n                <Hidden smDown>&nbsp;Print</Hidden>\r\n              </PrimaryButton>\r\n              <KerfForm onChange={handleKerfChange} value={state.kerfSize} />\r\n              &nbsp;\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={state.allowRotation}\r\n                    onChange={handleRotationChange}\r\n                    value=\"allowRotation\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                labelPlacement=\"top\"\r\n                label={`${matches ? \"Allow \" : \"\"}Rotation?`}\r\n              />\r\n              {/* Strategy selectors */}\r\n              <FormControlLabel\r\n                control={\r\n                  <Select\r\n                    value={state.selectionStrategy}\r\n                    onChange={e =>\r\n                      handleSelectionStrategyChange(e.target.value)\r\n                    }\r\n                  >\r\n                    <MenuItem value=\"\">-</MenuItem>\r\n                    <MenuItem value={0}>BEST_SHORT_SIDE_FIT</MenuItem>\r\n                    <MenuItem value={1}>BEST_LONG_SIDE_FIT</MenuItem>\r\n                    <MenuItem value={2}>BEST_AREA_FIT</MenuItem>\r\n                  </Select>\r\n                }\r\n                labelPlacement=\"top\"\r\n                label=\"Selection Strategy\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Select\r\n                    value={state.splitStrategy}\r\n                    onChange={e => handleSplitStrategyChange(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">-</MenuItem>\r\n                    <MenuItem value={0}>LongLeftoverAxisSplit</MenuItem>\r\n                    <MenuItem value={1}>ShortLeftoverAxisSplit</MenuItem>\r\n                    <MenuItem value={2}>LongAxisSplit</MenuItem>\r\n                    <MenuItem value={3}>ShortAxisSplit</MenuItem>\r\n                  </Select>\r\n                }\r\n                labelPlacement=\"top\"\r\n                label=\"Split Strategy\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Select\r\n                    value={state.sortStrategy}\r\n                    onChange={e => handleSortStrategyChange(e.target.value)}\r\n                  >\r\n                    <MenuItem value=\"\">-</MenuItem>\r\n                    <MenuItem value={0}>Area</MenuItem>\r\n                    <MenuItem value={1}>ShortSide</MenuItem>\r\n                    <MenuItem value={2}>LongSide</MenuItem>\r\n                    <MenuItem value={3}>Perimeter</MenuItem>\r\n                    <MenuItem value={4}>Differences</MenuItem>\r\n                    <MenuItem value={5}>Ratio</MenuItem>\r\n                  </Select>\r\n                }\r\n                labelPlacement=\"top\"\r\n                label=\"Sort Strategy\"\r\n              />\r\n              {/* End of Strategy selectors */}\r\n            </ActionBar>\r\n          </Grid>\r\n          {layouts.map(material => (\r\n            <Grid key={material.id} item xs={12} lg={6}>\r\n              <Material material={material} />\r\n            </Grid>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <Grid item xs={12}>\r\n          <LoadingIndicator message=\"Calculating layouts\" />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nLayout.propTypes = {\r\n  headerRef: PropTypes.shape({ current: PropTypes.any }).isRequired\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}